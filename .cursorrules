# vnstock-api Project Rules

## Project Overview

This is an API wrapper for the vnstock Python library, providing both REST and GraphQL interfaces for Vietnamese stock market data. The project includes authentication, rate limiting, and comprehensive documentation.

## Critical Implementation Paths

### API Development

- REST endpoints should follow resource-based naming (e.g., `/stocks/{symbol}/price`)
- GraphQL schema should mirror the structure of vnstock functions
- All API responses should be JSON-formatted
- Error handling should follow RFC 7807 (Problem Details for HTTP APIs)
- Expose OpenAPI documentation UI at `/docs` and `/redoc`
- Provide GraphQL Explorer interface at `/graphql`

### Code Style and Patterns

- Follow PEP 8 standards for Python code
- Use Python 3.12 features where appropriate
- Use type hints throughout the codebase
- Prefer async functions for I/O operations
- Use dependency injection pattern for services
- Organize code with clear layering (controllers -> services -> adapters)

### Testing

- Maintain >85% code coverage
- Mock external services in unit tests
- Use pytest for all testing
- Include integration tests for API endpoints
- Add serverless-specific tests for Lambda functions

### Deployment

- Optimize for serverless deployment (AWS Lambda or similar)
- Use external managed services for storage and caching
- Configure for minimal cold start times
- Use infrastructure as code for deployment

### Documentation

- Each implementation file must have a corresponding markdown file in `docs/implementation/`
- Documentation structure must mirror application structure
- All functions must be documented with descriptions, parameters, and return types
- Include usage examples for public APIs
- Update documentation when modifying code
- Use a consistent documentation template for all implementation files

## Project-Specific Patterns

### File Structure

Follow the defined file structure pattern:

```
app/
├── api/                 # API routes and handlers
│   ├── rest/            # REST API endpoints
│   │   ├── v1/          # API version 1
│   │   │   ├── stocks/  # Stock-related endpoints
│   │   │   ├── market/  # Market-related endpoints
│   └── graphql/         # GraphQL schema and resolvers
├── services/            # Business logic layer
├── adapters/            # Integration with vnstock
├── repositories/        # Data access layer
├── models/              # Data models (Pydantic)
└── infrastructure/      # Infrastructure components
```

### Documentation Structure

Mirror the application structure in documentation:

```
docs/
└── implementation/      # Implementation documentation
    ├── api/             # API documentation
    │   ├── rest/        # REST API documentation
    │   │   ├── v1/      # API v1 documentation
    │   │   │   ├── stocks/ # Stock endpoints documentation
    │   │   │   └── market/ # Market endpoints documentation
    │   └── graphql/     # GraphQL documentation
    ├── services/        # Services documentation
    ├── adapters/        # Adapters documentation
    ├── repositories/    # Repositories documentation
    ├── models/          # Models documentation
    └── infrastructure/  # Infrastructure documentation
```

### Documentation Template

Each implementation documentation file should follow this structure:

````markdown
# Module Name

## Overview

Brief description of the module's purpose and functionality.

## Functions

### function_name(param1, param2, ...)

**Description:**
Detailed description of what the function does.

**Parameters:**

- `param1` (type): Description of the parameter
- `param2` (type): Description of the parameter

**Returns:**
Description of the return value and its type.

**Example:**

```python
# Example code showing how to use the function
```
````

**Notes:**
Any additional information or caveats.

````

### Response Format

All REST API responses should follow this standard format:

```json
{
  "data": {}, // The actual response data
  "meta": {
    // Metadata about the response
    "timestamp": "ISO timestamp",
    "version": "API version"
  }
}
````

### Error Handling

Errors should be returned with appropriate HTTP status codes and details:

```json
{
  "error": {
    "code": "ERROR_CODE",
    "message": "Human-readable message",
    "details": {} // Optional additional information
  }
}
```

## Development Workflow

1. Always update the Memory Bank after significant changes
2. Use Poetry for dependency management with Python 3.12
3. Follow the established project phases in order
4. Write tests before implementing features
5. Use Docker for local development environment
6. Create documentation files alongside implementation files
7. Update documentation when code changes

## External Services

1. Redis Cloud for caching and rate limiting
2. Supabase/PostgreSQL for data persistence
3. AWS Lambda/API Gateway for serverless hosting

## TODO List

This is a running list of todo items discovered during development:

- Research vnstock library capabilities
- Design initial REST API endpoints
- Set up project structure
- Add authentication mechanism
- Configure serverless deployment
- Implement OpenAPI and GraphQL Explorer interfaces
- Optimize for Python 3.12
- Create documentation template for implementation files
- Set up documentation structure mirroring application code
